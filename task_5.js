// Напишите функцию, которая принимает два натуральных числа x и n и возвращает x в степени n. 
// Иначе говоря, умножает x на себя n раз и возвращает результат.

// Используйте Arrow Function синтаксис.

// Протестируйте функцию на любых значениях и выведите результат в консоль.

let x = prompt('Введите число 1');
while(x === null || x.trim() === '') {
	alert('Это так не работает, введите хоть что-нибудь))');
	x = prompt('Введите первое натуральное число');
}
let n = prompt('Введите число 2');
while(n === null || n.trim() === '') {
	alert('Это так не работает, введите хоть что-нибудь))');
	n = prompt('Введите второе натуральное число');
}
x = +x;
n = +n;


function exponentiationOld(x, n) {
// Решил добавить проверку на соответсвие введенного числа натуральному	
	if(x <= 0 || n <= 0) {
		return alert('Вы ввели число меньше или равное 0');
	} else if(!Number.isInteger(x) || !Number.isInteger(n)) {
		return alert('Вы ввели дробное число');
	}
	const result = Math.pow(x, n);
	console.log(`Результат возведения первого числа в степень, равную второму числу: ` + result);
	alert(`Результат возведения первого числа в степень, равную второму числу: ` + result)
}

exponentiationOld(x, n);


// Что-то запись не очень и сократилась((, возможно функция не слишком сложна))
const exponentiation = (x, n) => {
	if(x <= 0 || n <= 0) {
		return alert('Вы ввели число меньше или равное 0');
	} else if(!Number.isInteger(x) || !Number.isInteger(n)) {
		return alert('Вы ввели дробное число');
	}
	const result = Math.pow(x, n);
	console.log(`Результат возведения первого числа в степень, равную второму числу: ` + result);
	alert(`Результат возведения первого числа в степень, равную второму числу: ` + result)

}

exponentiation(x, n);


